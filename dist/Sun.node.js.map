{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"injectpromise\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"bignumber.js\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"semver\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"axios\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///external \"querystring\"","webpack:///./src/tronweb/src/utils/base64.js","webpack:///./src/tronweb/src/utils/bytes.js","webpack:///./src/tronweb/src/utils/address.js","webpack:///./src/tronweb/src/utils/code.js","webpack:///./src/tronweb/src/utils/base58.js","webpack:///./src/tronweb/src/utils/ethersUtils.js","webpack:///./src/tronweb/src/utils/crypto.js","webpack:///./src/tronweb/src/utils/accounts.js","webpack:///./src/tronweb/src/utils/abi.js","webpack:///./src/tronweb/src/utils/index.js","webpack:///./src/tronweb/src/lib/transactionBuilder.js","webpack:///./src/tronweb/src/lib/providers/index.js","webpack:///./src/tronweb/src/lib/providers/HttpProvider.js","webpack:///./src/tronweb/src/paramValidator/index.js","webpack:///./src/tronweb/src/lib/trx.js","webpack:///./src/tronweb/src/lib/contract/method.js","webpack:///./src/tronweb/src/lib/contract/index.js","webpack:///./src/tronweb/src/lib/plugin.js","webpack:///./src/tronweb/src/lib/event.js","webpack:///./src/tronweb/src/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_PREFIX_REGEX","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","keccak256","utils","sha256","toUtf8Bytes","recoverAddress","SigningKey","AbiCoder","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","concat","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","isArray","includes","arrayToBase64String","a","btoa","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","msgHex","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","decodeParams","names","types","ignoreMethodHash","type","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","TronWeb","toHex","decodeOutput","abi","filter","self","isValidURL","url","validator","isURL","protocols","require_tld","isObject","isJson","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","properties","mapEvent","event","data","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","fingerprint","parseEvent","inputs","padLeft","padding","amount","res","isNotNullOrUndefined","val","sleep","millis","Promise","resolve","setTimeout","code","accounts","crypto","ethersUtils","HttpProvider","host","timeout","user","headers","statusPage","instance","axios","baseURL","auth","request","then","payload","method","keys","params","Validator","tronWeb","param","msg","callback","Function","normalized","no","gt","lt","gte","lte","optional","se","isAddress","notPositive","notEqual","invalid","fromUtf8","resultManager","message","toUtf8","TransactionBuilder","injectPromise","injectpromise","to","from","defaultAddress","options","sendTrx","notValid","to_address","owner_address","permissionId","Permission_id","fullNode","err","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","undefined","freezeBalance","frozen_balance","frozen_duration","receiver_address","unfreezeBalance","withdrawBlockRewards","console","log","applyForSR","votes","voterAddress","vote","entries","srAddress","voteCount","vote_address","vote_count","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","bytecode","parameters","entrys","payable","some","func","constructorParams","find","it","args","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","splice","_triggerSmartContract","_isConstant","triggerSmartContract","confirmed","contractAddress","functionSelector","assign","function_selector","ownerAddress","clearABI","trx","cache","contracts","brokerage","updateBrokerage","createToken","abbreviation","description","totalSupply","trxRatio","tokenRatio","saleStart","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","fullnodeSatisfies","vote_score","accountName","updateAccount","account_name","accountId","setAccountId","startsWith","account_id","updateToken","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","activesPermission","owner","witness","actives","newTxID","newTransaction","visible","alterTransaction","dataFormat","raw_data","extension","expiration","extendExpiration","addUpdateData","ETH_MESSAGE_HEADER","Trx","token","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","_getTransactionInfoById","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","account","getAccount","getAccountById","getAccountInfoById","getBalance","balance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getBandwidth","assetIssue","tokens","_parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","nodes","port","start","end","startNum","endNum","getBlockRange","listSuperRepresentatives","witnesses","listTokens","timeUntilNextVoteCycle","Math","floor","getContract","useTronHeader","verifyMessage","verifySignature","defaultPrivateKey","multisig","signatureHex","signString","fromPrivateKey","multiSign","getSignWeight","signWeight","foundKey","permission","approved_list","getApprovedList","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","proposal","getProposal","listProposals","proposals","getChainParameters","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","exchanges","listExchangesPaginated","getNodeInfo","info","getTokenListByName","getTokenByID","_getReward","_getBrokerage","reward","messageBytes","messageDigest","recovered","tronAddress","base58Address","fromHex","signingKey","signDigest","getParamTypes","Method","outputs","getFunctionSelector","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","msg2","chunk","broadcast","error","checkResult","getTransactionInfo","resMessage","rawResponse","decoded","contractResult","keepTxID","eventServer","listener","lastBlock","since","getEvents","eventName","blockNumber","filters","onlyUnconfirmed","onlyConfirmed","getEventsByContractAddress","events","latestEvent","newEvents","priorEvent","reject","bindListener","clearInterval","setInterval","stop","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","at","startCallback","_startEventListener","_stopEventListener","Plugin","pluginNoOverride","disablePlugins","pluginInterface","requires","components","libs","plugged","skipped","plugin","semver","satisfies","version","fullClass","className","classInstanceName","component","Event","healthcheck","providers","isValidProvider","isConnected","sinceTimestamp","size","page","fromTimestamp","previousLastEventFingerprint","previousFingerprint","routeParams","warn","qs","querystring","response","getEventsByTransactionID","fullHost","setFullNode","setSolidityNode","setEventServer","setPrivateKey","fullnodeVersion","nodeInfo","configNodeInfo","codeVersion","abs","setAddress","emit","provider","knownProvider","setStatusPage","getFullnodeVersion","setServer","currentProviders","prefix","Buffer","fromDecimal","isFinite","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","EventEmitter","SunWeb","mainOptions","sideOptions","mainGatewayAddress","sideGatewayAddress","sideChainId","mainchain","sidechain","setMainGatewayAddress","setSideGatewayAddress","setChainId","chainId","chainIdByteArr","byteArr","byteArrHash","depositFee","depositTrx","contractInstance","depositTRX","depositTrc10","depositTRC10","fee","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","retryDeposit","retryMapping","trxHash","mappingFee","mappingTrc","mappingTRC20","mappingTRC721","withdrawFee","withdrawTrx","withdrawTRX","withdrawTrc10","withdrawTRC10","numOrId","withdrawTrc","injectFund","hexAddress","nonce","retryWithdrawFee","retryDepositFee","retryMappingFee"],"mappings":"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","file":"Sun.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"injectpromise\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"semver\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"axios\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"querystring\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","\nimport {utils} from 'ethers';\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    recoverAddress,\n    SigningKey,\n    AbiCoder\n}\n","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256} from './ethersUtils';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import {AbiCoder} from './ethersUtils';\nimport TronWeb from '../index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from '../utils/address';\n\nconst abiCoder = new AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    // workaround for unsupported trcToken type\n    types = types.map(type => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256')\n        }\n        return type\n    })\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n\n\nexport const decodeOutput = (abi, output) => {\n    const names = abi.map(({name}) => name).filter(name => !!name);\n    const types = abi.map(({type}) => type);\n\n    return decodeParams(names, types, output);\n};","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\nimport * as ethersUtils from './ethersUtils';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from './address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    },\n\n    async sleep(millis = 1000){\n        return new Promise(resolve => setTimeout(resolve, millis));\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi,\n    ethersUtils\n};\n","import TronWeb from '../index';\nimport utils from '../utils';\nimport {AbiCoder} from '../utils/ethersUtils';\nimport Validator from '../paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from '../utils/address';\nimport injectpromise from 'injectpromise';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from, options);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from, options);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/transferasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(buyer)) {\n            options = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(\n        address = this.tronWeb.defaultAddress.hex,\n        url = false,\n        options,\n        callback = false\n    ) {\n        console.log(toHex(address), utils.isObject(url))\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (utils.isObject(url) && utils.isValidURL(address)) {\n            options = url;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n        console.log(toHex(address))\n\n        const data = {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createwitness', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            votes,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || 1_000_000_000;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (abi.entrys)\n            abi = abi.entrys;\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if (typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if (parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for (let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                else if (type == 'address[]')\n                    value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n        if (options && options.permissionId)\n            args.Permission_id = options.permissionId;\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    triggerConstantContract(...params) {\n        params[2]._isConstant = true\n        return this.triggerSmartContract(...params);\n    }\n\n    triggerConfirmedConstantContract(...params) {\n        params[2]._isConstant = true\n        params[2].confirmed = true\n        return this.triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit,\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: 1_000_000_000\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'function selector',\n                type: 'not-empty-string',\n                value: functionSelector\n            }\n        ], callback))\n            return;\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if (parameters.length) {\n            const abiCoder = new AbiCoder();\n            let types = [];\n            const values = [];\n\n            for (let i = 0; i < parameters.length; i++) {\n                let {type, value} = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                else if (type == 'address[]')\n                    value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                // workaround for unsupported trcToken type\n                types = types.map(type => {\n                    if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256')\n                    }\n                    return type\n                })\n\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress),\n            function_selector: functionSelector,\n            parameter: parameters\n        };\n\n        if (!options._isConstant) {\n            args.call_value = parseInt(callValue)\n            args.fee_limit = parseInt(feeLimit)\n            if (utils.isNotNullOrUndefined(tokenValue))\n                args.call_token_value = parseInt(tokenValue)\n            if (utils.isNotNullOrUndefined(tokenId))\n                args.token_id = parseInt(tokenId)\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/trigger${options._isConstant ? 'constant' : 'smart'}contract`, args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    clearABI(contractAddress, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.clearABI, contractAddress, ownerAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress)\n        };\n\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            delete this.tronWeb.trx.cache.contracts[contractAddress]\n        }\n        this.tronWeb.fullNode.request('wallet/clearabi', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    updateBrokerage(brokerage, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.updateBrokerage, brokerage, ownerAddress);\n\n        if (!utils.isNotNullOrUndefined(brokerage))\n            return callback('Invalid brokerage provided');\n\n        if (!utils.isInteger(brokerage) || brokerage < 0 || brokerage > 100)\n            return callback('Brokerage must be an integer between 0 and 100');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            brokerage: parseInt(brokerage),\n            owner_address: toHex(ownerAddress)\n        };\n\n        this.tronWeb.fullNode.request('wallet/updateBrokerage', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision <= 0 || precision > 6))\n            return callback('precision must be a positive integer > 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (this.tronWeb.fullnodeSatisfies('>=3.5.0') && !(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address, options);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    setAccountId(accountId, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.setAccountId, accountId, address);\n        }\n\n        if (accountId && utils.isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/setaccountid', {\n            account_id: accountId,\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        options,\n                        callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  options,\n                  callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      options,\n                      callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    async newTxID(transaction, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.newTxID, transaction);\n\n        this.tronWeb.fullNode\n            .request(\n                'wallet/getsignweight',\n                transaction,\n                'post'\n            )\n            .then(newTransaction => {\n                newTransaction = newTransaction.transaction.transaction\n                if (typeof transaction.visible === 'boolean') {\n                    newTransaction.visible = transaction.visible\n                }\n                callback(null, newTransaction)\n            })\n            .catch(err => callback('Error generating a new transaction id.'));\n    }\n\n    async alterTransaction(transaction, options = {}, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.alterTransaction, transaction, options);\n\n        if (transaction.signature)\n            return callback('You can not extend the expiration of a signed transaction.')\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex')\n                options.data = this.tronWeb.toHex(options.data);\n            options.data = options.data.replace(/^0x/, '')\n            if (options.data.length === 0)\n                return callback('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                return callback('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        this.newTxID(transaction, callback)\n    }\n\n    async extendExpiration(transaction, extension, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.extendExpiration, transaction, extension);\n\n        this.alterTransaction(transaction, {extension}, callback);\n    }\n\n    async addUpdateData(transaction, data, dataFormat = 'utf8', callback = false) {\n\n        if (utils.isFunction(dataFormat)) {\n            callback = dataFormat;\n            dataFormat = 'utf8';\n        }\n\n        if (!callback)\n            return this.injectPromise(this.addUpdateData, transaction, data, dataFormat);\n\n        this.alterTransaction(transaction, {data, dataFormat}, callback);\n    }\n\n}\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from '@tronweb/utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from '../index';\nimport utils from '../utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && (\n                !utils.isNotNullOrUndefined(value)\n                || (type !== 'boolean' && value === false)))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (!utils.isString(value) ||\n                        (typeof gt === 'number' && value.length <= param.gt) ||\n                        (typeof lt === 'number' && value.length >= param.lt) ||\n                        (typeof gte === 'number' && value.length < param.gte) ||\n                        (typeof lte === 'number' && value.length > param.lte)) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import TronWeb from '../index';\nimport utils from '../utils';\nimport {keccak256, toUtf8Bytes, recoverAddress, SigningKey} from '../utils/ethersUtils';\nimport {ADDRESS_PREFIX} from '../utils/address';\nimport Validator from \"../paramValidator\";\nimport injectpromise from 'injectpromise';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\n// it should be: '\\x15TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.cache = {\n            contracts: {}\n        }\n        this.validator = new Validator(tronWeb);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions)\n                callback('Transaction not found in block');\n            else if (typeof index == 'number') {\n                if (index >= 0 && index < transactions.length)\n                    callback(null, transactions[index]);\n                else\n                    callback('Invalid transaction index provided');\n            } else\n                callback(null, transactions);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: false}, callback)\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: true}, callback)\n    }\n\n    _getTransactionInfoById(transactionID, options, callback = false) {\n        if (!callback)\n            return this.injectPromise(this._getTransactionInfoById, transactionID, options);\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/gettransactioninfobyid`, {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getAccountById(id = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: true}, callback);\n    }\n\n    getAccountInfoById(id, options, callback) {\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id\n            }\n        ], callback))\n            return;\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`, {\n            account_id: id\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccountById(id, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: false}, callback);\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (this.cache.contracts[contractAddress]) {\n            callback(null, this.cache.contracts[contractAddress]);\n            return;\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n            this.cache.contracts[contractAddress] = contract;\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        signature = signature.replace(/^0x/, '');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const signingKey = new SigningKey(privateKey);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n\n        return signatureHex\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address)\n                    foundKey = true;\n            });\n\n            if (!foundKey)\n                return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 10;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchangesPaginated, limit, offset);\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedexchangelist', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (Array.isArray(token.assetIssue)) {\n                callback(null, token.assetIssue.map(t => this._parseToken(t)));\n            } else if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    async getReward(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getReward(address, options, callback);\n    }\n\n    async getUnconfirmedReward(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getReward(address, options, callback);\n    }\n\n    async getBrokerage(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async getUnconfirmedBrokerage(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async _getReward(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getReward, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getReward`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.reward === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.reward);\n            }).catch(err => callback(err));\n    }\n\n\n    async _getBrokerage(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getBrokerage, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getBrokerage`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.brokerage === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.brokerage);\n            }).catch(err => callback(err));\n    }\n\n};\n","import utils from '@tronweb/utils';\nimport {ADDRESS_PREFIX_REGEX} from '@tronweb/utils/address';\nimport injectpromise from 'injectpromise';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({type}) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({name}) => name).filter(name => !!name);\n    const types = abi.map(({type}) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = injectpromise(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(ADDRESS_PREFIX_REGEX, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index === 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result === 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                if (options.keepTxID) {\n                    return callback(null, [signedTransaction.txID, decoded]);\n                }\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from '@tronweb/index';\nimport utils from '@tronweb/utils';\nimport Method from './method';\nimport injectpromise from 'injectpromise';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            await utils.sleep(3000);\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi ? contract.abi.entrys : []);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import TronWeb from '@tronweb/index';\nimport utils from '@tronweb/utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false, options = {}) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n        this.disablePlugins = options.disablePlugins;\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            libs: [],\n            plugged: [],\n            skipped: []\n        }\n        if (this.disablePlugins) {\n            result.error = 'This instance of TronWeb has plugins disabled.'\n            return result;\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            if (pluginInterface.fullClass) {\n                // plug the entire class at the same level of tronWeb.trx\n                let className = plugin.constructor.name\n                let classInstanceName = className.substring(0, 1).toLowerCase() + className.substring(1)\n                if (className !== classInstanceName) {\n                    TronWeb[className] = Plugin\n                    this.tronWeb[classInstanceName] = plugin\n                    result.libs.push(className)\n                }\n            } else {\n                // plug methods into a class, like trx\n                for (let component in pluginInterface.components) {\n                    if (!this.tronWeb.hasOwnProperty(component)) {\n                        continue\n                    }\n                    let methods = pluginInterface.components[component]\n                    let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                    for (let method in methods) {\n                        if (method === 'constructor' || (this.tronWeb[component][method] &&\n                            (pluginNoOverride.includes(method) // blacklisted methods\n                                || /^_/.test(method)) // private methods\n                        )) {\n                            result.skipped.push(method)\n                            continue\n                        }\n                        this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                        result.plugged.push(method)\n                    }\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import TronWeb from '@tronweb/index';\nimport utils from '@tronweb/utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\nimport injectpromise from 'injectpromise';\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n\n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.onlyConfirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.onlyUnconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import providers from './lib/providers';\nimport utils from './utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport {version} from '../package.json';\nimport semver from 'semver';\nimport injectpromise from 'injectpromise';\n\nimport TransactionBuilder from './lib/transactionBuilder';\nimport Trx from './lib/trx';\nimport Contract from './lib/contract';\nimport Plugin from './lib/plugin';\nimport Event from './lib/event';\nimport {keccak256} from './utils/ethersUtils';\nimport {ADDRESS_PREFIX} from './utils/address';\n\nconst DEFAULT_VERSION = '3.5.0';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n                // for retro-compatibility:\n                solidityNode = false, eventServer = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this, options);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.injectPromise = injectpromise(this);\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo()\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', {hex, base58});\n    }\n\n    fullnodeSatisfies(version) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n\n        this.getFullnodeVersion();\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if (!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n","import injectpromise from 'injectpromise';\n\nimport TronWeb from '@tronweb';\n\nexport default class SunWeb {\n    constructor(mainOptions = false, sideOptions = false, mainGatewayAddress = false, sideGatewayAddress = false, sideChainId = false, privateKey = false) {\n        mainOptions = { ...mainOptions, privateKey };\n        sideOptions = { ...sideOptions, privateKey };\n        this.mainchain = new TronWeb(mainOptions);\n        this.sidechain = new TronWeb(sideOptions);\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = injectpromise(this);\n        this.validator = this.mainchain.trx.validator;\n\n        const self = this;\n        this.sidechain.trx.sign = (...args) => {\n            return self.sign(...args);\n        };\n        this.sidechain.trx.multiSign = (...args) => {\n            return self.multiSign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = this.sidechain.utils.ethersUtils.sha256(byteArr);\n\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async multiSign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, permissionId = false, callback = false) {\n        if (this.utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback) return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!this.utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) return callback('Invalid transaction provided');\n\n        // set permission id\n        transaction.raw_data.contract[0].Permission_id = permissionId;\n\n        // check if private key insides permission list\n        const address = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(privateKey)).toLowerCase();\n        const signWeight = await this.sidechain.trx.getSignWeight(transaction, permissionId);\n\n        if (signWeight.result.code === 'PERMISSION_ERROR') {\n           return callback(signWeight.result.message);\n        }\n\n        let foundKey = false;\n        signWeight.permission.keys.map(key => {\n           if (key.address === address) foundKey = true;\n        });\n\n        if (!foundKey) return callback(privateKey + ' has no permission to sign');\n\n        if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n           return callback(privateKey + ' already sign transaction');\n        }\n\n        // reset transaction\n        if (signWeight.transaction && signWeight.transaction.transaction) {\n            transaction = signWeight.transaction.transaction;\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n        } else {\n             return callback('Invalid transaction provided');\n        }\n\n        // sign\n        try {\n           return callback(null, this.signTransaction(privateKey, transaction));\n        } catch (ex) {\n           callback(ex);\n        }\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.trx.signString(transaction, privateKey, useTronHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n     /**\n     * deposit asset to sidechain\n     */\n    async depositTrx(\n        callValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrx, callValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(depositFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options,\n            callValue: depositFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        fee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, fee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'fee',\n                type: 'integer',\n                value: fee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: fee,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey);\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                switch(functionSelector) {\n                    case 'depositTRC20':\n                        result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'depositTRC721':\n                        result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'retryDeposit':\n                        result = await contractInstance.retryDeposit(num).send(options, privateKey);\n                        break;\n                    case 'retryMapping':\n                        result = await contractInstance.retryMapping(num).send(options, privateKey);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, trxHash, mappingFee, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'trxHash',\n                type: 'not-empty-string',\n                value: trxHash\n            },\n            {\n                name: 'mappingFee',\n                type: 'integer',\n                value: mappingFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        trxHash = trxHash.startsWith('0x') ? trxHash : ('0x' + trxHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: mappingFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(trxHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(trxHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw trx from sidechain to mainchain\n     */\n    async withdrawTrx(\n        callValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrx, callValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(withdrawFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: withdrawFee,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        functionSelector,\n        numOrId,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, functionSelector, numOrId, withdrawFee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: withdrawFee\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.sidechain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.sidechain.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!this.utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = this.utils.abi.decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            num,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            id,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async retryWithdraw(\n        nonce,\n        retryWithdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.sidechain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryWithdraw(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            nonce,\n            retryWithdrawFee,\n            feeLimit,\n            this.sideGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryDeposit(\n        nonce,\n        retryDepositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryDeposit';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryDepositFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryMapping(\n        nonce,\n        retryMappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryMapping';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryMappingFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n}"],"sourceRoot":""}